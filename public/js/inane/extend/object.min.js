if(!Object.prototype.watch){Object.defineProperty(Object.prototype,"watch",{enumerable:false,configurable:false,writable:true,value:function(prop,handler){var getter,setter,change={property:prop,value:this[prop],previous:undefined,set update(v){if(this.value==v)return false;this.previous=this.value;this.value=v;return true}},getter=function(){return change.value},setter=function(val){if(change.update=val)handler.call(this,change);return val};if(delete this[prop]){Object.defineProperty(this,prop,{get:getter,set:setter,configurable:true})}}})}if(!Object.prototype.unwatch){Object.defineProperty(Object.prototype,"unwatch",{enumerable:false,configurable:false,writable:true,value:function(prop){var val=this[prop];delete this[prop];this[prop]=val}})}if(!Object.prototype.jsonString){Object.defineProperty(Object.prototype,"jsonString",{enumerable:false,configurable:false,writable:true,value:function(){return JSON.stringify(this)}})}if(!Object.prototype.pick){Object.defineProperty(Object.prototype,"pick",{enumerable:false,configurable:false,writable:true,value:function(propsArray){if(!propsArray)return;if(!Array.isArray(propsArray)&&typeof propsArray=="string")propsArray=[propsArray];propsArray=propsArray.unique();const picked={};propsArray.forEach(prop=>{if(this.hasOwnProperty(prop))picked[prop]=this[prop]});return picked}})}if(!Object.prototype.readPath){Object.defineProperty(Object.prototype,"readPath",{enumerable:false,configurable:false,writable:true,value:function(path,delimiter="."){if(!path)return this;const eP=typeof path=="string"?path.split(delimiter):path;let t=Object.assign({},this);for(let i=0;i<eP.length;i++)if(t&&t.hasOwnProperty(eP[i]))t=t[eP[i]];else t=undefined;return t}})}if(!Object.prototype.sorted){Object.defineProperty(Object.prototype,"sorted",{enumerable:false,configurable:false,writable:true,value:function(){return this.pick(this.keys().sort())}})}if(!Object.prototype.propertyRename){Object.defineProperty(Object.prototype,"propertyRename",{enumerable:false,configurable:false,writable:true,value:function(old_key,new_key){if(old_key!==new_key&&(this.hasOwnProperty(old_key)&&!this.hasOwnProperty(new_key))){Object.defineProperty(this,new_key,Object.getOwnPropertyDescriptor(this,old_key));delete this[old_key]}return this}})}if(!Object.prototype.renameProperty){Object.defineProperty(Object.prototype,"renameProperty",{enumerable:false,configurable:false,writable:true,value:function(old_key,new_key){return this.propertyRename(old_key,new_key)}})}if(!Object.prototype.groupByProperty){Object.defineProperty(Object.prototype,"groupByProperty",{enumerable:false,configurable:false,writable:true,value:function(key){try{let target=Array.isArray(this)?this:this.values();return target.reduce((rv,x)=>{(rv[x[key]]=rv[x[key]]||[]).push(x);return rv},{})}catch(error){console.error("Unable to group object.")}}})}if(!Object.prototype.keys){Object.defineProperty(Object.prototype,"keys",{enumerable:false,configurable:false,writable:true,value:function(){return Object.keys(this)}})}if(!Object.prototype.values){Object.defineProperty(Object.prototype,"values",{enumerable:false,configurable:false,writable:true,value:function(){return Object.values(this)}})}