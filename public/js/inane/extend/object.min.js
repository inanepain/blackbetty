if(!Object.prototype.watch){Object.defineProperty(Object.prototype,'watch',{enumerable:false,configurable:true,writable:false,value:function(prop,handler){var getter,setter,change={property:prop,value:this[prop],previous:undefined,set update(v){if(this.value==v)return false;this.previous=this.value;this.value=v;return true;}},getter=function(){return change.value;},setter=function(val){if(change.update=val)handler.call(this,change);return val;};if(delete this[prop]){Object.defineProperty(this,prop,{get:getter,set:setter,enumerable:true,configurable:true});}}});}
if(!Object.prototype.unwatch){Object.defineProperty(Object.prototype,'unwatch',{enumerable:false,configurable:true,writable:false,value:function(prop){var val=this[prop];delete this[prop];this[prop]=val;}});}
if(!Object.prototype.jsonString){Object.defineProperty(Object.prototype,'jsonString',{enumerable:false,configurable:true,writable:false,value:function(){return JSON.stringify(this);}});}
if(!Object.prototype.pick){Object.defineProperty(Object.prototype,'pick',{enumerable:false,configurable:true,writable:false,value:function(propsArray){if(!propsArray)return;const picked={};propsArray.forEach(prop=>picked[prop]=this[prop]);return picked;}});}